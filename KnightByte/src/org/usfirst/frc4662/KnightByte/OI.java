// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4662.KnightByte;

import org.usfirst.frc4662.KnightByte.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;

import org.usfirst.frc4662.KnightByte.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    //Buttons
    public JoystickButton loadButton;
    public JoystickButton shooterTrigger;
    public Joystick operatorJoystick;
    public Joystick joystick1;
    public Joystick joystick2;
    public JoystickButton cameraButton;
    public JoystickButton targetToggle;
    public JoystickButton targetShoot;


    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        joystick2 = new Joystick(1);
        joystick1 = new Joystick(0);
        operatorJoystick = new Joystick(2);
        
        targetShoot = new JoystickButton(operatorJoystick, 1);
        targetShoot.whenPressed(new LocateTarget());
        shooterTrigger = new JoystickButton(operatorJoystick, 3);
        shooterTrigger.whenPressed(new Shoot());
        loadButton = new JoystickButton(operatorJoystick, 2);
        loadButton.whileHeld(new LoaderWheels());
        loadButton.whenReleased(new LoaderWheelStop());
        cameraButton = new JoystickButton(operatorJoystick, 7);
        cameraButton.whenPressed(new CameraToggle());
        targetToggle = new JoystickButton(operatorJoystick, 8);
        targetToggle.whenPressed(new TargetToggle());

        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("Shoot", new Shoot());
        SmartDashboard.putData("LocateTarget", new LocateTarget());
        SmartDashboard.putData("ShooterUpDown", new ShooterUpDown());
        SmartDashboard.putData("ShootingCommandGroup", new ShootingCommandGroup());
        SmartDashboard.putData("RotateToTarget", new RotateToTarget());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getOperatorJoystick() {
        return operatorJoystick;
    }

    public Joystick getJoystick1() {
        return joystick1;
    }

    public Joystick getJoystick2() {
        return joystick2;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

