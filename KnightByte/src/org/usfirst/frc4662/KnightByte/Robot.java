// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4662.KnightByte;

import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc4662.KnightByte.commands.*;
import org.usfirst.frc4662.KnightByte.subsystems.*;
import org.usfirst.frc4662.KnightByte.commands.AutoCommandGroup;
import org.usfirst.frc4662.KnightByte.RobotMap;

import com.ni.vision.NIVision;
import com.ni.vision.NIVision.DrawMode;
import com.ni.vision.NIVision.ShapeMode;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

    Command autonomousCommand;

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DriveSubsystem driveSubsystem;
    public static Shooter shooter;
    public static Loader loader;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    int startingPosition = 5;
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveSubsystem = new DriveSubsystem();
        shooter = new Shooter();
        loader = new Loader();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();
        
        SmartDashboard.putInt("Starting Position", startingPosition);
        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        autonomousCommand = new AutonomousCommand();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){

    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    public void autonomousInit() {
        // schedule the autonomous command (example)
    	String strAttackPattern = "Default Attack Pattern";  //Dynamically construct attack pattern
    	SmartDashboard.getInt("Starting Position", startingPosition);
    	try {
			autonomousCommand = (Command) new AutoCommandGroup(strAttackPattern);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        SmartDashboard.putString("AutoPattern value", strAttackPattern);
        autonomousCommand.start();
      //  if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
        NIVision.IMAQdxStartAcquisition(RobotMap.cameraSessionCurrent);
        RobotMap.cameraRect = new NIVision.Rect();
        RobotMap.cameraRect.height = 200;
        RobotMap.cameraRect.width = 200;
        RobotMap.cameraRect.left = 220; // assumes 640 wide halved minus width halved
        RobotMap.cameraRect.top = 140; // assumes 480 high halved minus height halved
    
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
        NIVision.IMAQdxGrab(RobotMap.cameraSessionCurrent, RobotMap.frame, 1);
        if (RobotMap.cameraSessionCurrent == RobotMap.cameraSessionShooter){
        	NIVision.imaqDrawShapeOnImage(RobotMap.frame, RobotMap.frame, RobotMap.cameraRect, DrawMode.PAINT_INVERT, ShapeMode.SHAPE_RECT, 0.0f);
        }
        		
        
    //    NIVision.imaqDrawLineOnImage(dest, source, mode, start, end, newPixelValue);
        CameraServer.getInstance().setImage(RobotMap.frame);
    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
}
