// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4662.KnightByte.commands;

import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc4662.KnightByte.Robot;
import org.usfirst.frc4662.KnightByte.RobotMap;

import edu.wpi.first.wpilibj.command.Command;
/**
 *
 */
public class RotateChassis extends Command {
	double m_dTargetAngle;
	double m_dOffsetAngle = 0;
	double m_RotateSpeed;
	AnalogGyro gyro = RobotMap.rotationalGyro;
	
    public RotateChassis(double dOffsetAngle) {
    	m_dOffsetAngle = dOffsetAngle;
        requires(Robot.driveSubsystem);
    }
    
    protected void initialize() {
    	m_dTargetAngle = gyro.getAngle() + m_dOffsetAngle;
    	//Have to add the target offset from the camera targeting to the gyro reading, not sure how to pass the value into the command
    	if (m_dOffsetAngle < 0) {
    		m_RotateSpeed = 0.15;
    	} else if (m_dOffsetAngle > 0){
    		m_RotateSpeed = -0.15;
    	} else {
    		m_RotateSpeed = 0;
    	}
    }

    protected void execute() {
    	Robot.driveSubsystem.driveArcadeAutonomous(0,m_RotateSpeed);
    }

    protected boolean isFinished() {
        boolean bReturnValue = false;
        double currentAngle = gyro.getAngle();
        if (m_dOffsetAngle < 0 && currentAngle <= m_dTargetAngle) {
        	bReturnValue = true;
        } else if (m_dOffsetAngle > 0 && currentAngle >= m_dTargetAngle) {
        	bReturnValue = true;
        } else if (m_dOffsetAngle == 0) {
        	bReturnValue = true;
        }
        return bReturnValue;
    }

    protected void end() {
    }

    protected void interrupted() {
    }
}
