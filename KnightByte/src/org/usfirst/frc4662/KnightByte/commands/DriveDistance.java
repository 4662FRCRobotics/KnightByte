// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4662.KnightByte.commands;

import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc4662.KnightByte.Robot;

import edu.wpi.first.wpilibj.command.Command;
/**
 *
 */
public class DriveDistance extends Command {
	private double m_Speed;
	private double m_Distance;
	private boolean m_Direction;
	
   
    // Called just before this Command runs the first time
   public DriveDistance(double speed, double distance, boolean bForwardDirection) {
	   requires(Robot.driveSubsystem);

    	//speed must be between 0 and 1
    	//validation below as appropriate
    	//if greater than 1 or less than -1 then make speed 1
    	//if less than 0 and greater than -1 then multiply by -1
    	if (speed>1 || speed<-1) {
    		m_Speed = 1;
    	} else if (speed<0 && speed>=-1) {
    		m_Speed = speed*-1;
    	} else {
    		m_Speed = speed;
    	}
    	m_Distance = distance;
    	if (bForwardDirection) {
    		m_Speed = m_Speed*-1;
    	}
    	Robot.driveSubsystem.driveReset();
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	Robot.driveSubsystem.driveArcadeAutonomous(m_Speed, 0);
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
    	//we're finished when distance traveled >= total distance
    	return (Math.abs(Robot.driveSubsystem.getDistance()) >= m_Distance);
    	
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.driveSubsystem.driveArcadeAutonomous(0, 0);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }

	@Override
	protected void initialize() {
		// TODO Auto-generated method stub
		
	}

	
}
