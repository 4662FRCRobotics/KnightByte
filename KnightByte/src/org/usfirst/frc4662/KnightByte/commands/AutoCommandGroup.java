// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4662.KnightByte.commands;
import edu.wpi.first.wpilibj.Preferences;
import edu.wpi.first.wpilibj.command.CommandGroup;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.DocumentBuilder;

import org.usfirst.frc4662.KnightByte.Robot;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.StringReader;

/**
 *
 */
public class AutoCommandGroup extends CommandGroup {
	//Document m_xmldocAttackPattern;
	
	private String readFile( String file ) throws IOException {
		BufferedReader reader = new BufferedReader( new FileReader (file));
		String	       line = null;
		StringBuilder   stringBuilder = new StringBuilder();
		boolean bFirstTime = true;
		while( ( line = reader.readLine())!= null){
			line = line.trim();
			if (bFirstTime == true) {
				bFirstTime = false;
			} else {
				stringBuilder.append( "|" );
			}
			stringBuilder.append( line );
		}
		reader.close();
		return stringBuilder.toString();
	}
	
    public  AutoCommandGroup(String strAttackPattern) throws Exception {
    	int iDistance = 0;
    	double dSpeed = 0;
    	double dWaitDuration = 0;
    	
    	//Preferences prefs = Preferences.getInstance();
    	SmartDashboard.putString("AutoCommandGroup", "Start");
    	
        	String strFileName = "";
        	switch (strAttackPattern) {
   
        	case "GetOutOfWay":
        		strFileName = "/home/lvuser/Autonomous/AutoGetOutOfWay.txt";
        		break;
        	case "AutoBin1":
        		strFileName = "/home/lvuser/Autonomous/AutoBin1.txt";
        		break;
        		
        	default:
        		strFileName = "/home/lvuser/Autonomous/ReachDefense.txt";
        	}
        	SmartDashboard.putString("AutoFile", strFileName);
        	String autoCommandList = readFile(strFileName);
        	String[] autoArray = autoCommandList.split("\\|");
	    	SmartDashboard.putString("AutoCommandGroup", "Before for loop");
	    	//SmartDashboard.putNumber ("NumNodes", iNumNodes);
	    	//for(i = 0; i < iNumNodes; i++) {
	    	for(int i =0; i < autoArray.length; i = i + 2){
	    		//node = nlAutoAttacks.item(i);
	    		//String strAutoCommand = node.getNodeName();
	    		String strAutoCommand = autoArray[i];
	    		SmartDashboard.putString("Direction", strAutoCommand);
	    		switch (strAutoCommand) {
	    			case "throttle":
	    				dSpeed = Double.valueOf(autoArray[i + 1]);
	    				SmartDashboard.putNumber("Speed", dSpeed);
	    				break;
	    			case "forward": 
	    	    		iDistance = Integer.valueOf(autoArray[i + 1]);
	    	    		SmartDashboard.putNumber("Distance", iDistance);
	    				addSequential (new DriveDistance(dSpeed, iDistance, true));
	    				//addSequential (new RotateRight90());
	    				break;
	    			case "rotate":
	    	    		iDistance = Integer.valueOf(autoArray[i + 1]);
	    	    		SmartDashboard.putNumber("Distance", iDistance);
	    				addSequential (new AutoMoveChassis(AutoCardinalDirections.SOUTH, iDistance, dSpeed));
	    				//addSequential (new RotateRight90());
	    				break;
	    			case "locatetarget":
	    	    		iDistance = Integer.valueOf(autoArray[i + 1]);
	    	    		SmartDashboard.putNumber("Distance", iDistance);
	    				addSequential (new AutoMoveChassis(AutoCardinalDirections.EAST, iDistance, dSpeed));
	    				//addSequential (new RotateRight90());
	    				break;
	    			
	    			case "wait":
	    				dWaitDuration = Double.valueOf(autoArray [i + 1]);
	    				addSequential (new AutoWait(dWaitDuration));
	    				break;
	    					    			
	    			default:
	    				SmartDashboard.putString("HI", "Default");
	    				
	    		}
	    		SmartDashboard.putString("AutoCommandGroup", "looping" + i);
	    	}
    	//}
    	
    	SmartDashboard.putString("AutoCommandGroup", "End");
        // To run multiple commands at the same time,
        // use addParallel()
        // e.g. addParallel(new Command1());
        //      addSequential(new Command2());
        // Command1 and Command2 will run in parallel.

        // A command group will require all of the subsystems that each member
        // would require.
        // e.g. if Command1 requires chassis, and Command2 requires arm,
        // a CommandGroup containing them would require both the chassis and the
        // arm.
    }
}
