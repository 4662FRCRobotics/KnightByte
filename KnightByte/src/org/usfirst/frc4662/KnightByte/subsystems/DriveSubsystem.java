// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4662.KnightByte.subsystems;



import org.usfirst.frc4662.KnightByte.RobotMap;
import org.usfirst.frc4662.KnightByte.commands.*;

import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class DriveSubsystem extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController leftFront = RobotMap.driveSubsystemLeftFront;
    private final SpeedController rightFront = RobotMap.driveSubsystemRightFront;
    private final SpeedController leftRear = RobotMap.driveSubsystemLeftRear;
    private final SpeedController rightRear = RobotMap.driveSubsystemRightRear;
    private final RobotDrive robotDrive41 = RobotMap.driveSubsystemRobotDrive41;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    private final Encoder driveEncoder = RobotMap.driveEncoder;

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new ArcadeDrive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    public void driveTankWithJoystick (Joystick stick1, Joystick stick2) {
    	RobotMap.driveSubsystemRobotDrive41.tankDrive(-stick1.getY(), -stick2.getY());
    	SmartDashboard.putNumber("stick1", stick1.getY());
    	SmartDashboard.putNumber("stick2", stick2.getY());
    	logDashboard();
    }   
    
    public void driveArcadeWithJoystick (Joystick stick1) {
    	RobotMap.driveSubsystemRobotDrive41.arcadeDrive(-stick1.getY(), -stick1.getX());
    	SmartDashboard.putNumber("stick1Y", stick1.getY());
    	SmartDashboard.putNumber("stick1X", stick1.getX());
    	logDashboard();
    }   
    
    public void driveTankAutonomous (double leftValue, double rightValue) {
    	RobotMap.driveSubsystemRobotDrive41.tankDrive(leftValue, rightValue);
    	logDashboard();
    }
    
    public void driveArcadeAutonomous (double moveValue, double rotateValue) {
    	RobotMap.driveSubsystemRobotDrive41.arcadeDrive(moveValue, rotateValue);
    	logDashboard();
    }
    
   
    
    public double getDistance () {
    	return (double) driveEncoder.getDistance();
    }
    
    public boolean getDirection () {
    	return (boolean) driveEncoder.getDirection();
    }
    
    public double getRaw() {
    	return (double) driveEncoder.getRaw();
    }
    
    public double getCount () {
    	return (double) driveEncoder.get();
    }
    
    public  void driveReset () {
    	driveEncoder.reset();
    }
    
    private void logDashboard () {
    	SmartDashboard.putNumber("Drive Distance", getDistance());
    	SmartDashboard.putNumber("Drive Count", getCount());
    	SmartDashboard.putBoolean("Drive Direction", getDirection());
    	SmartDashboard.putNumber("Raw Encoder", getRaw());
    }
}

